import sqlite3
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Bot
from aiogram.dispatcher.filters.state import State, StatesGroup
from crud_functions2 import initiate_db, get_all_products, add_user, is_included

api = "7248785286:AAFZ47NdkM4_oBuNVYdC8-ZBXvzgwCrYwHs"
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

initiate_db()


def populate_products():
    connection = sqlite3.connect('database_tg.db')
    cursor = connection.cursor()

    cursor.execute("INSERT INTO Products (title, description, price) VALUES ('–ö–æ—Ç–∏–∫ 1', '–ü—Ä–∏–∫–æ–ª—å–Ω—ã–π –∫–æ—Ç–∏–∫', 100)")
    cursor.execute("INSERT INTO Products (title, description, price) VALUES ('–ö–æ—Ç–∏–∫ 2', '–ó–∞–±–∞–≤–Ω—ã–π –∫–æ—Ç–∏–∫', 200)")
    cursor.execute("INSERT INTO Products (title, description, price) VALUES ('–ö–æ—Ç–∏–∫ 3', '–ú–∏–ª–∞—à–∫–∞ –∫–æ—Ç–∏–∫', 300)")
    cursor.execute("INSERT INTO Products (title, description, price) VALUES ('–ö–æ—Ç–∏–∫ 4', '–ö—Ä—É—Ç–æ–π –∫–æ—Ç–∏–∫', 400)")

    connection.commit()
    connection.close()


# populate_products()

class RegistrationState(StatesGroup):
    username = State()
    email = State()
    age = State()


class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


def get_keyboard():
    buttons = [
        KeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'),
        KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
        KeyboardButton(text='–ö—É–ø–∏—Ç—å'),
        KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    ]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    return keyboard


def get_inline_product_keyboard():
    buttons = [
        InlineKeyboardButton(text='–ö–æ—Ç–∏–∫ 1', callback_data='product_buying'),
        InlineKeyboardButton(text='–ö–æ—Ç–∏–∫ 2', callback_data='product_buying'),
        InlineKeyboardButton(text='–ö–æ—Ç–∏–∫ 3', callback_data='product_buying'),
        InlineKeyboardButton(text='–ö–æ—Ç–∏–∫ 4', callback_data='product_buying')
    ]
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.add(*buttons)
    return inline_keyboard


def get_inline_keyboard():
    buttons = [
        InlineKeyboardButton(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π', callback_data='calories'),
        InlineKeyboardButton(text='–§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞', callback_data='formulas')
    ]
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.add(*buttons)
    return inline_keyboard


@dp.message_handler(commands=['start'])
async def start(message):
    keyboard = get_keyboard()
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)


@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def sign_up(message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç):")
    await RegistrationState.username.set()

@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message):
    await message.reply("Nice Info üëç")

@dp.message_handler(state=RegistrationState.username)
async def set_username(message, state: FSMContext):
    username = message.text
    if is_included(username):
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è")
    else:
        await state.update_data(username=username)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:")
        await RegistrationState.email.set()


@dp.message_handler(state=RegistrationState.email)
async def set_email(message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await RegistrationState.age.set()


@dp.message_handler(state=RegistrationState.age)
async def set_age(message, state: FSMContext):
    age = message.text
    await state.update_data(age=age)
    user_data = await state.get_data()
    add_user(user_data['username'], user_data['email'], user_data['age'])
    await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.finish()


@dp.message_handler(text='–ö—É–ø–∏—Ç—å')
async def get_buying_list(message):
    products = get_all_products()

    photos = [
        "https://image.petmd.com/files/styles/978x550/public/2023-09/how-smart-are-cats.jpg",
        "https://sussexbylines.co.uk/wp-content/uploads/2024/03/cat-out-hunting.jpg",
        "https://www.forbes.com/advisor/wp-content/uploads/2023/09/getty_creative.jpeg-900x510.jpg",
        "https://humanepro.org/sites/default/files/styles/article_new/public/images/post/cat-portrait.jpg?itok=36RD2Zba"
    ]

    for product, photoo in zip(products, photos):
        description = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]} | –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]} | –¶–µ–Ω–∞: {product[3]}"
        await message.reply(description)
        await bot.send_photo(message.chat.id, photo=photoo)

    inline_keyboard = get_inline_product_keyboard()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=inline_keyboard)


@dp.message_handler(text='–†–∞—Å—Å—á–∏—Ç–∞—Ç—å')
async def main_menu(message):
    inline_keyboard = get_inline_keyboard()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=inline_keyboard)


@dp.callback_query_handler(lambda call: call.data == 'product_buying')
async def send_confirm_message(call: types.CallbackQuery):
    await call.message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç!")
    await call.answer()


@dp.callback_query_handler(lambda call: call.data == 'formulas')
async def get_formulas(call: types.CallbackQuery):
    formula_text = (
        "–§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞ –¥–ª—è –º—É–∂—á–∏–Ω:\n"
        "BMR = 10 * –≤–µ—Å (–∫–≥) + 6.25 * —Ä–æ—Å—Ç (—Å–º) - 5 * –≤–æ–∑—Ä–∞—Å—Ç (–≥) + 5\n\n"
        "–§–æ—Ä–º—É–ª–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω:\n"
        "BMR = 10 * –≤–µ—Å (–∫–≥) + 6.25 * —Ä–æ—Å—Ç (—Å–º) - 5 * –≤–æ–∑—Ä–∞—Å—Ç (–≥) - 161"
    )
    await call.message.reply(formula_text)
    await call.answer()


@dp.callback_query_handler(lambda call: call.data == 'calories')
async def set_age(call: types.CallbackQuery):
    await call.message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await UserState.age.set()
    await call.answer()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state: FSMContext):
    await state.update_data(growth=message.text)
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state: FSMContext):
    await state.update_data(weight=message.text)
    data = await state.get_data()

    age = int(data['age'])
    growth = int(data['growth'])
    weight = int(data['weight'])

    # –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞ - –°–∞–Ω –ñ–µ–æ—Ä–∞ –¥–ª—è –º—É–∂—á–∏–Ω
    calories = 10 * weight + 6.25 * growth - 5 * age + 5

    await message.reply(f"–í–∞—à–∞ –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calories} –∫–∫–∞–ª.")
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
